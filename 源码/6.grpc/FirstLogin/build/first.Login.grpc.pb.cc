// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: first.Login.proto

#include "first.Login.pb.h"
#include "first.Login.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace first {
namespace Login {

static const char* LoginService_method_names[] = {
  "/first.Login.LoginService/Regist",
  "/first.Login.LoginService/Login",
};

std::unique_ptr< LoginService::Stub> LoginService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LoginService::Stub> stub(new LoginService::Stub(channel, options));
  return stub;
}

LoginService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Regist_(LoginService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(LoginService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LoginService::Stub::Regist(::grpc::ClientContext* context, const ::first::Login::IMRegistRequest& request, ::first::Login::IMRegistResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::first::Login::IMRegistRequest, ::first::Login::IMRegistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Regist_, context, request, response);
}

void LoginService::Stub::async::Regist(::grpc::ClientContext* context, const ::first::Login::IMRegistRequest* request, ::first::Login::IMRegistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::first::Login::IMRegistRequest, ::first::Login::IMRegistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Regist_, context, request, response, std::move(f));
}

void LoginService::Stub::async::Regist(::grpc::ClientContext* context, const ::first::Login::IMRegistRequest* request, ::first::Login::IMRegistResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Regist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::first::Login::IMRegistResponse>* LoginService::Stub::PrepareAsyncRegistRaw(::grpc::ClientContext* context, const ::first::Login::IMRegistRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::first::Login::IMRegistResponse, ::first::Login::IMRegistRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Regist_, context, request);
}

::grpc::ClientAsyncResponseReader< ::first::Login::IMRegistResponse>* LoginService::Stub::AsyncRegistRaw(::grpc::ClientContext* context, const ::first::Login::IMRegistRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegistRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LoginService::Stub::Login(::grpc::ClientContext* context, const ::first::Login::IMLoginRequest& request, ::first::Login::IMLoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::first::Login::IMLoginRequest, ::first::Login::IMLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void LoginService::Stub::async::Login(::grpc::ClientContext* context, const ::first::Login::IMLoginRequest* request, ::first::Login::IMLoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::first::Login::IMLoginRequest, ::first::Login::IMLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void LoginService::Stub::async::Login(::grpc::ClientContext* context, const ::first::Login::IMLoginRequest* request, ::first::Login::IMLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::first::Login::IMLoginResponse>* LoginService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::first::Login::IMLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::first::Login::IMLoginResponse, ::first::Login::IMLoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::first::Login::IMLoginResponse>* LoginService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::first::Login::IMLoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

LoginService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoginService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoginService::Service, ::first::Login::IMRegistRequest, ::first::Login::IMRegistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LoginService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::first::Login::IMRegistRequest* req,
             ::first::Login::IMRegistResponse* resp) {
               return service->Regist(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoginService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoginService::Service, ::first::Login::IMLoginRequest, ::first::Login::IMLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LoginService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::first::Login::IMLoginRequest* req,
             ::first::Login::IMLoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
}

LoginService::Service::~Service() {
}

::grpc::Status LoginService::Service::Regist(::grpc::ServerContext* context, const ::first::Login::IMRegistRequest* request, ::first::Login::IMRegistResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoginService::Service::Login(::grpc::ServerContext* context, const ::first::Login::IMLoginRequest* request, ::first::Login::IMLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace first
}  // namespace Login

